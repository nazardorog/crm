pipeline {
    agent any

    parameters {
        booleanParam(
                name: 'Expedite Smoke',
                defaultValue: false,
                description: 'Expedite Smoke запустити всі тести'
        )
        booleanParam(
                name: 'WES001_LoadCreateBol',
                defaultValue: false,
                description: 'Создание New Load с типом файла Pod'
        )
        booleanParam(
                name: 'WES002_LoadCreateRateConfirmation',
                defaultValue: false,
                description: 'Создание New Load с типом файла Rate Confirmation'
        )
        booleanParam(
                name: 'WES003_LoadCreatePod',
                defaultValue: false,
                description: 'Создание New Load с типом файла Pod'
        )
        booleanParam(
                name: 'WES004_LoadCreateOther',
                defaultValue: false,
                description: 'Создание New Load с типом файла Other'
        )
        booleanParam(
                description: 'Создание New Load / валидация полей рейта брокер и драйвера',
                name: 'WES005_ValidateRateBrokerOwner',
                defaultValue: false
        )
    }

    stages {

        stage('Підготовка') {
            steps {
                echo "Перевірка вибраних тестів..."
                script {
                    def selectedTests = []

                    if (params.RUN_ALL_TESTS) {
                        echo "RUN_ALL_TESTS увімкнено. Шукаємо всі тести у src/test/java/web/expedite/smoke..."

                        def testFiles = sh(
                                script: "find src/test/java/web/expedite/smoke -name 'WES*.java' -exec basename {} .java \\;",
                                returnStdout: true
                        ).trim()

                        selectedTests1 = testFiles.split('\n')
                        echo "Автовибрані тести: ${selectedTests1.join(', ')}"

                    } else {
                        if (params.WES001_LoadCreateBol) selectedTests.add('WES001_LoadCreateBol')
                        if (params.WES002_LoadCreateRateConfirmation) selectedTests.add('WES002_LoadCreateRateConfirmation')
                        if (params.WES003_LoadCreatePod) selectedTests.add('WES003_LoadCreatePod')
                        if (params.WES004_LoadCreateOther) selectedTests.add('WES004_LoadCreateOther')
                        if (params.WES005_ValidateRateBrokerOwner) selectedTests.add('WES005_ValidateRateBrokerOwner')

                        if (selectedTests.isEmpty()) {
                            error("Не вибрано жодного тесту! Виберіть тести для запуску.")
                        }

                        echo "Вибрані тести: ${selectedTests.join(', ')}"
                    }

                    env.SELECTED_TESTS = selectedTests.join(',')
                }
            }
        }

        stage('Запуск тестів') {
            steps {
                script {
                    def testsToRun = env.SELECTED_TESTS.split(',')
                    def parallelStages = [:]

                    for (int i = 0; i < testsToRun.size(); i++) {
                        def testName = testsToRun[i].trim()

                        parallelStages["${testName}"] = { currentTest ->
                            return {
                                stage("Запуск ${currentTest}") {
                                    echo "Запускаємо тест: ${currentTest}"

                                    try {
                                        sh "RUN_ENV=jenkins mvn test -Dtest=${currentTest}"
                                        echo "✅ Тест ${currentTest} пройшов успішно"

                                    } catch (Exception e) {
                                        echo "❌ Тест ${currentTest} завершився з помилкою: ${e.message}"
                                        currentBuild.result = 'UNSTABLE'
                                    }
                                }
                            }

                        }(testName)
                    }
                    parallel parallelStages
                }
            }
        }
    }

    post {
        always {
            allure([
                    reportBuildPolicy: 'ALWAYS',
                    results: [[path: 'target/allure-results']]
            ])
            echo "Тест завершено: ${params.TEST_CLASS}"
        }
    }
}