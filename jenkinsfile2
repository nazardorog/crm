pipeline {
    agent any

    parameters {
        booleanParam(
                name: 'WES001_LoadCreateBol',
                defaultValue: false,
                description: '–ó–∞–ø—É—Å—Ç–∏—Ç–∏ WES001_LoadCreateBol.java'
        )
        booleanParam(
                name: 'WES002_LoadCreateRateConfirmation',
                defaultValue: false,
                description: '–ó–∞–ø—É—Å—Ç–∏—Ç–∏ WES002_LoadCreateRateConfirmation.java'
        )
        booleanParam(
                name: 'WES003_LoadCreatePod',
                defaultValue: false,
                description: '–ó–∞–ø—É—Å—Ç–∏—Ç–∏ WES003_LoadCreatePod.java'
        )
        booleanParam(
                name: 'WES004_LoadCreateOther',
                defaultValue: false,
                description: '–ó–∞–ø—É—Å—Ç–∏—Ç–∏ WES004_LoadCreateOther.java'
        )
        booleanParam(
                name: 'WES005_ValidateRateBrokerOwner',
                defaultValue: false,
                description: '–ó–∞–ø—É—Å—Ç–∏—Ç–∏ WES005_ValidateRateBrokerOwner.java'
        )
        booleanParam(
                name: 'RUN_ALL_TESTS',
                defaultValue: false,
                description: '–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—Å—ñ —Ç–µ—Å—Ç–∏'
        )
    }

    stages {
        stage('–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞') {
            steps {
                echo "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–±—Ä–∞–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤..."
                script {
                    def selectedTests = []

                    if (params.RUN_ALL_TESTS) {
                        selectedTests = [
                                'WES001_LoadCreateBol',
                                'WES002_LoadCreateRateConfirmation',
                                'WES003_LoadCreatePod',
                                'WES004_LoadCreateOther',
                                'WES005_ValidateRateBrokerOwner'
                        ]
                        echo "–í–∏–±—Ä–∞–Ω–æ: –í–°–Ü –¢–ï–°–¢–ò"
                    } else {
                        if (params.WES001_LoadCreateBol) selectedTests.add('WES001_LoadCreateBol')
                        if (params.WES002_LoadCreateRateConfirmation) selectedTests.add('WES002_LoadCreateRateConfirmation')
                        if (params.WES003_LoadCreatePod) selectedTests.add('WES003_LoadCreatePod')
                        if (params.WES004_LoadCreateOther) selectedTests.add('WES004_LoadCreateOther')
                        if (params.WES005_ValidateRateBrokerOwner) selectedTests.add('WES005_ValidateRateBrokerOwner')

                        if (selectedTests.isEmpty()) {
                            error("–ù–µ –≤–∏–±—Ä–∞–Ω–æ –∂–æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç—É! –í–∏–±–µ—Ä—ñ—Ç—å —Ç–µ—Å—Ç–∏ –¥–ª—è –∑–∞–ø—É—Å–∫—É.")
                        }

                        echo "–í–∏–±—Ä–∞–Ω—ñ —Ç–µ—Å—Ç–∏: ${selectedTests.join(', ')}"
                    }

                    env.SELECTED_TESTS = selectedTests.join(',')
                }
            }
        }

        stage('–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤') {
            steps {
                script {
                    def testsToRun = env.SELECTED_TESTS.split(',')

                    for (test in testsToRun) {
                        stage("–ó–∞–ø—É—Å–∫ ${test}") {
                            echo "–ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç: ${test}"

                            // –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ–≤–Ω–∏–π —à–ª—è—Ö –¥–æ —Ç–µ—Å—Ç—É
                            def testPath = "web/expedite/smoke/loadBoard/${test}.java"
                            echo "–®–ª—è—Ö –¥–æ —Ç–µ—Å—Ç—É: ${testPath}"

                            try {
                                // –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Maven (–∑–º—ñ–Ω—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É –ø—ñ–¥ –≤–∞—à –ø—Ä–æ–µ–∫—Ç)
                                bat """
                                    mvn test -Dtest=WES001_LoadCreateBol
                                """

                                // –ê–±–æ —è–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ Gradle:
                                // bat "gradle test --tests ${test}"

                                echo "‚úÖ –¢–µ—Å—Ç ${test} –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ"

                            } catch (Exception e) {
                                echo "‚ùå –¢–µ—Å—Ç ${test} –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑ –ø–æ–º–∏–ª–∫–æ—é: ${e.message}"
                                currentBuild.result = 'UNSTABLE'
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–µ—Å—Ç—ñ–≤"

            // –ê—Ä—Ö—ñ–≤—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—ñ–≤
            publishTestResults testResultsPattern: '**/target/surefire-reports/*.xml'

            // –ê—Ä—Ö—ñ–≤—É—î–º–æ –ª–æ–≥–∏
            archiveArtifacts artifacts: '**/target/surefire-reports/*', fingerprint: true, allowEmptyArchive: true
        }
        success {
            echo "üéâ –£—Å—ñ –≤–∏–±—Ä–∞–Ω—ñ —Ç–µ—Å—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ!"
        }
        failure {
            echo "üí• –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—è –Ω–µ–≤–¥–∞–ª–æ"
        }
        unstable {
            echo "‚ö†Ô∏è –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –º–∞—é—Ç—å –ø—Ä–æ–±–ª–µ–º–∏"
        }
    }
}