pipeline {
    agent any

    stages {
        stages {
            stage('Init parameters') {
                steps {
                    script {
                        def paramData = readJSON file: 'params.json'

                        def generatedParams = []

                        paramData.each { key, desc ->
                            generatedParams << booleanParam(
                                name: key,
                                defaultValue: false,
                                description: desc
                            )
                        }

                        generatedParams << choice(
                            name: 'MAX_PARALLEL_THREADS',
                            choices: ['1', '2', '3', '4', '5'],
                            description: 'Максимальна кількість одночасних потоків для тестів'
                        )

                        properties([
                            parameters(generatedParams)
                        ])
                    }
                }
            }
        }

        stage('Підготовка') {

            steps {

                echo "Перевірка вибраних тестів..."
                script {
                    sh '''
                        # Очищення workspace
                        rm -rf target/ allure-report allure-report.zip
                        mkdir -p target/allure-results

                        echo "✅ Workspace очищено"
                    '''

                    def selectedTests = []

                    if (params.ExpediteSmoke) {
                        echo "ExpediteSmoke увімкнено. Шукаємо всі тести у src/test/java/web/expedite/smoke/loadBoard..."

                        def testFiles = sh(
                                script: "find src/test/java/web/expedite/smoke/loadBoard -name 'WES*.java' -exec basename {} .java \\;",
                                returnStdout: true
                        ).trim()

                        selectedTests = testFiles.split('\n')
                        echo "Автовибрані тести: ${selectedTests.join(', ')}"
                    } else {
                        if (params.WES001_LoadCreateBol) selectedTests.add('WES001_LoadCreateBol')
                        if (params.WES002_LoadCreateRateConfirmation) selectedTests.add('WES002_LoadCreateRateConfirmation')
                        if (params.WES003_LoadCreatePod) selectedTests.add('WES003_LoadCreatePod')
                        if (params.WES004_LoadCreateOther) selectedTests.add('WES004_LoadCreateOther')
                        if (params.WES005_ValidateRateBrokerOwner) selectedTests.add('WES005_ValidateRateBrokerOwner')

                        if (selectedTests.isEmpty()) {
                            error("Не вибрано жодного тесту! Виберіть тести для запуску.")
                        }

                        echo "Вибрані тести: ${selectedTests.join(', ')}"
                    }

                    env.SELECTED_TESTS = selectedTests.join(',')
                }
            }
        }

        stage('Запуск тестів') {
            steps {
                script {
                    def testsToRun = env.SELECTED_TESTS.split(',')
                    def maxThreads = params.MAX_PARALLEL_THREADS.toInteger()

                    echo "Запуск тестів з максимальною кількістю потоків: ${maxThreads}"

                    // Якщо потоків більше ніж тестів, або потік тільки один - запускаємо звичайно
                    if (maxThreads >= testsToRun.size() || maxThreads == 1) {
                        if (maxThreads == 1) {
                            echo "Запуск тестів послідовно (один за одним)"
                            for (int i = 0; i < testsToRun.size(); i++) {
                                def testName = testsToRun[i].trim()
                                stage("Запуск ${testName}") {
                                    echo "Запускаємо тест: ${testName}"
                                    try {
                                        sh "RUN_ENV=jenkins mvn test -Dtest=${testName}"
                                        echo "✅ Тест ${testName} пройшов успішно"
                                    } catch (Exception e) {
                                        echo "❌ Тест ${testName} завершився з помилкою: ${e.message}"
                                        currentBuild.result = 'UNSTABLE'
                                    }
                                }
                            }
                        } else {
                            // Запуск всіх тестів паралельно
                            def parallelStages = [:]
                            for (int i = 0; i < testsToRun.size(); i++) {
                                def testName = testsToRun[i].trim()
                                parallelStages["${testName}"] = { currentTest ->
                                    return {
                                        stage("Запуск ${currentTest}") {
                                            echo "Запускаємо тест: ${currentTest}"
                                            try {
                                                sh "RUN_ENV=jenkins mvn test -Dtest=${currentTest}"
                                                echo "✅ Тест ${currentTest} пройшов успішно"
                                            } catch (Exception e) {
                                                echo "❌ Тест ${currentTest} завершився з помилкою: ${e.message}"
                                                currentBuild.result = 'UNSTABLE'
                                            }
                                        }
                                    }
                                }(testName)
                            }
                            parallel parallelStages
                        }
                    } else {
                        // Запуск тестів батчами з обмеженням потоків
                        echo "Запуск тестів батчами по ${maxThreads} потоків"

                        for (int startIndex = 0; startIndex < testsToRun.size(); startIndex += maxThreads) {
                            def endIndex = Math.min(startIndex + maxThreads, testsToRun.size())
                            def currentBatch = testsToRun[startIndex..<endIndex]

                            echo "Запуск батчу ${(startIndex / maxThreads).toInteger() + 1}: ${currentBatch.join(', ')}"

                            def parallelStages = [:]
                            for (int i = 0; i < currentBatch.size(); i++) {
                                def testName = currentBatch[i].trim()
                                parallelStages["${testName}"] = { currentTest ->
                                    return {
                                        stage("Запуск ${currentTest}") {
                                            echo "Запускаємо тест: ${currentTest}"
                                            try {
                                                sh "RUN_ENV=jenkins mvn test -Dtest=${currentTest}"
                                                echo "✅ Тест ${currentTest} пройшов успішно"
                                            } catch (Exception e) {
                                                echo "❌ Тест ${currentTest} завершився з помилкою: ${e.message}"
                                                currentBuild.result = 'UNSTABLE'
                                            }
                                        }
                                    }
                                }(testName)
                            }

                            parallel parallelStages

                            // Невелика пауза між батчами для стабільності
                            if (endIndex < testsToRun.size()) {
                                echo "Пауза між батчами..."
                                sleep(2)
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            allure([
                    reportBuildPolicy: 'ALWAYS',
                    results: [[path: 'target/allure-results']]
            ])
            echo "Тести завершено"
        }
    }
}