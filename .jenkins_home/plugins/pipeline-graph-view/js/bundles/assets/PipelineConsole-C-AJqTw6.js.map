{"version":3,"mappings":"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","names":["items","className","visible","setVisible","useState","show","hide","jsx","index","item","isValidElement","dropdownItem","disabled","DropdownPortal","createPortal","height","StagesCustomization","stageViewPosition","useLayoutPreferences","handleViewChange","e","jsxs","Fragment","mainViewVisibility","MainViewVisibility","StageViewPosition","ViewIcon","Filter","visibleStatuses","resetStatuses","Result","Tooltip","DefaultDropdownProps","classNames","StatusIcon","allVisible","stages","selected","search","setSearch","filteredStages","filterStageTree","useCallback","nodeId","onNodeSelect","stage","handleSelect","memo","TreeNode","hasChildren","isExpanded","setIsExpanded","hasSelectedDescendant","child","useEffect","isSelected","onSelect","handleToggleClick","filteredChildren","props","run","useRunPoller","expandedSteps","setSteps","stepBuffers","stepsRef","useRef","updateStepConsoleOffset","forceUpdate","startByte","response","getConsoleTextOffset","stepBuffer","newLogLines","prev","stepId","parseUrlParams","steps","params","setUserManuallySetNode","expanded","step","LOG_FETCH_SIZE","setExpandedSteps","getDefaultSelectedStep","userManuallySetNode","selectedStep","stepResult","selectedStepResult","defaultStep","setOpenStage","startPollingPipeline","data","error","handleStageSelect","stepsForStage","lastStep","newlyExpandedSteps","openStage","id","getStageSteps","stageId","buffers","findStage","onMoreConsoleClick","onData","checkComplete","polling","getStateUpdateFn","isAtTop","isAtBottom","setIsAtBottom","isScrollable","windowHeight","atTop","scrollTop","atBottom","offset","observer","updateScrollState","SplitView","setStageViewHeight","stageViewWidth","stageViewHeight","storageKey","isVertical","direction","initialSize","treeViewWidth","panelSize","dividerRef","startDragging","setIsDragging","stopDragging","handleDragging","getContainerOffset","clampedSize","newSize","handleDoubleClick","setTreeViewWidth","resetSize","setStageViewWidth","containerRef","rect","Children","childrenArray","gridTemplate","StageNodeLink","agentName","agent","href","getAgentUrl","name","DOCUMENT","CONSOLE","StageDetails","Total","Started","Paused","ConsoleLogStream","lazy","ConsoleLogCard","handleToggle","showMoreLogs"],"ignoreList":[],"sources":["../../../../frontend/common/components/dropdown.tsx","../../../../frontend/common/components/dropdown-portal.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/components/skeleton.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/components/stages-customization.tsx","../../../../frontend/common/components/filter.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/DataTreeView.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/PipelineConsoleModel.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/hooks/use-steps-poller.ts","../../../../frontend/pipeline-console-view/pipeline-console/main/scroll-to-top-bottom.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/split-view.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/StageNodeLink.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/symbols.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/stage-details.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/ConsoleLogCard.tsx"],"sourcesContent":["import Tippy, { TippyProps } from \"@tippyjs/react\";\nimport { isValidElement, ReactElement, ReactNode, useState } from \"react\";\n\nimport Tooltip from \"./tooltip.tsx\";\n\n/**\n * A customized (and customizable) implementation of Tippy dropdowns\n */\nexport default function Dropdown({\n  items,\n  disabled,\n  className,\n}: DropdownProps) {\n  const [visible, setVisible] = useState(false);\n  const show = () => setVisible(true);\n  const hide = () => setVisible(false);\n\n  return (\n    <Tooltip content={\"More actions\"}>\n      <Tippy\n        visible={visible}\n        onClickOutside={hide}\n        {...DefaultDropdownProps}\n        content={\n          <div className=\"jenkins-dropdown\">\n            {items.map((item, index) => {\n              if (item === \"separator\") {\n                return (\n                  <div\n                    key={`separator-${index}`}\n                    className=\"jenkins-dropdown__separator\"\n                  />\n                );\n              }\n\n              if (isValidElement(item)) {\n                return (\n                  <div key={index} className=\"jenkins-dropdown__custom-item\">\n                    {item}\n                  </div>\n                );\n              }\n\n              const dropdownItem = item as DropdownItem;\n              return (\n                <a\n                  key={index}\n                  className=\"jenkins-dropdown__item\"\n                  href={dropdownItem.href}\n                  target={dropdownItem.target}\n                  download={dropdownItem.download}\n                >\n                  <div className=\"jenkins-dropdown__item__icon\">\n                    {dropdownItem.icon}\n                  </div>\n                  {dropdownItem.text}\n                </a>\n              );\n            })}\n          </div>\n        }\n      >\n        <button\n          className={\"jenkins-button \" + className}\n          type=\"button\"\n          disabled={disabled}\n          onClick={visible ? hide : show}\n        >\n          <div className=\"jenkins-overflow-button__ellipsis\">\n            <span />\n            <span />\n            <span />\n          </div>\n        </button>\n      </Tippy>\n    </Tooltip>\n  );\n}\n\nexport const DefaultDropdownProps: TippyProps = {\n  theme: \"dropdown\",\n  duration: 250,\n  touch: true,\n  animation: \"dropdown\",\n  interactive: true,\n  offset: [0, 0],\n  placement: \"bottom-start\",\n  arrow: false,\n};\n\ninterface DropdownProps {\n  items: (DropdownItem | ReactElement | \"separator\")[];\n  disabled?: boolean;\n  className?: string;\n}\n\ninterface DropdownItem {\n  text: string;\n  href?: string;\n  icon: ReactNode;\n  target?: string;\n  download?: string;\n}\n","import { ReactNode } from \"react\";\nimport { createPortal } from \"react-dom\";\n\ninterface DropdownPortalProps {\n  children: ReactNode;\n}\n\nexport default function DropdownPortal({ children }: DropdownPortalProps) {\n  const container = document.getElementById(\"console-pipeline-overflow-root\");\n\n  if (!container) {\n    console.error(\"DropdownPortal: Target container not found!\");\n    return null;\n  }\n\n  return createPortal(children, container);\n}\n","import \"./skeleton.scss\";\n\nexport default function Skeleton({ height }: { height?: number }) {\n  return (\n    <div\n      className={\"pgv-skeleton\"}\n      style={\n        height\n          ? {\n              height: `${height}rem`,\n            }\n          : {}\n      }\n    />\n  );\n}\n","import \"./stages-customization.scss\";\n\nimport { ChangeEvent } from \"react\";\n\nimport {\n  MainViewVisibility,\n  StageViewPosition,\n  useLayoutPreferences,\n} from \"../providers/user-preference-provider.tsx\";\n\nexport default function StagesCustomization() {\n  const {\n    mainViewVisibility,\n    setMainViewVisibility,\n    stageViewPosition,\n    setStageViewPosition,\n  } = useLayoutPreferences();\n\n  const handleViewChange = (e: ChangeEvent<HTMLSelectElement>) => {\n    setMainViewVisibility(e.target.value as MainViewVisibility);\n  };\n\n  const handlePositionChange = (e: ChangeEvent<HTMLSelectElement>) => {\n    setStageViewPosition(e.target.value as StageViewPosition);\n  };\n\n  return (\n    <>\n      <label\n        className=\"jenkins-dropdown__item pgv-stages-customization\"\n        htmlFor=\"main-view-visibility\"\n      >\n        <div className=\"jenkins-dropdown__item__icon\">\n          <ViewIcon\n            mainViewVisibility={mainViewVisibility}\n            stageViewPosition={stageViewPosition}\n          />\n        </div>\n        Views\n        <span>\n          {mainViewVisibility === MainViewVisibility.BOTH && \"Graph and stages\"}\n          {mainViewVisibility === MainViewVisibility.GRAPH_ONLY && \"Graph\"}\n          {mainViewVisibility === MainViewVisibility.STAGES_ONLY && \"Stages\"}\n        </span>\n        <select\n          id=\"main-view-visibility\"\n          value={mainViewVisibility}\n          onChange={handleViewChange}\n        >\n          <option value={MainViewVisibility.BOTH}>Graph and stages</option>\n          <option value={MainViewVisibility.GRAPH_ONLY}>Graph</option>\n          <option value={MainViewVisibility.STAGES_ONLY}>Stages</option>\n        </select>\n      </label>\n\n      <label\n        className=\"jenkins-dropdown__item pgv-stages-customization\"\n        htmlFor=\"stage-view-position\"\n      >\n        <div className=\"jenkins-dropdown__item__icon\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n            <circle\n              cx=\"128\"\n              cy=\"96\"\n              r=\"48\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n            />\n            <circle\n              cx=\"256\"\n              cy=\"416\"\n              r=\"48\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n            />\n            <path\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n              d=\"M256 256v112\"\n            />\n            <circle\n              cx=\"384\"\n              cy=\"96\"\n              r=\"48\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n            />\n            <path\n              d=\"M128 144c0 74.67 68.92 112 128 112M384 144c0 74.67-68.92 112-128 112\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n            />\n          </svg>\n        </div>\n        Graph position\n        <span>\n          {stageViewPosition === StageViewPosition.TOP ? \"Top\" : \"Left\"}\n        </span>\n        <select\n          id=\"stage-view-position\"\n          value={stageViewPosition}\n          onChange={handlePositionChange}\n          disabled={mainViewVisibility === MainViewVisibility.STAGES_ONLY}\n        >\n          <option value={StageViewPosition.TOP}>Top</option>\n          <option value={StageViewPosition.LEFT}>Left</option>\n        </select>\n      </label>\n    </>\n  );\n}\n\nfunction ViewIcon({\n  mainViewVisibility,\n  stageViewPosition,\n}: {\n  mainViewVisibility: MainViewVisibility;\n  stageViewPosition: StageViewPosition;\n}) {\n  if (mainViewVisibility === \"both\" && stageViewPosition === \"top\") {\n    return (\n      <svg\n        width=\"512px\"\n        height=\"512px\"\n        viewBox=\"0 0 512 512\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <g\n          fill=\"none\"\n          fillRule=\"evenodd\"\n          stroke=\"currentColor\"\n          strokeWidth=\"32\"\n        >\n          <rect x=\"31\" y=\"86\" width=\"450\" height=\"340\" rx=\"70\" />\n          <line x1=\"31\" y1=\"180\" x2=\"470\" y2=\"180\" />\n          <line x1=\"184\" y1=\"180\" x2=\"184\" y2=\"420\" />\n        </g>\n      </svg>\n    );\n  }\n\n  if (mainViewVisibility === \"both\" && stageViewPosition === \"left\") {\n    return (\n      <svg\n        width=\"512px\"\n        height=\"512px\"\n        viewBox=\"0 0 512 512\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <g\n          fill=\"none\"\n          fillRule=\"evenodd\"\n          stroke=\"currentColor\"\n          strokeWidth=\"32\"\n        >\n          <rect x=\"31\" y=\"86\" width=\"450\" height=\"340\" rx=\"70\" />\n          <line x1=\"150\" y1=\"100\" x2=\"150\" y2=\"420\" />\n          <line x1=\"280\" y1=\"100\" x2=\"280\" y2=\"420\" />\n        </g>\n      </svg>\n    );\n  }\n\n  if (mainViewVisibility === \"graphOnly\" && stageViewPosition === \"top\") {\n    return (\n      <svg\n        width=\"512px\"\n        height=\"512px\"\n        viewBox=\"0 0 512 512\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <g\n          fill=\"none\"\n          fillRule=\"evenodd\"\n          stroke=\"currentColor\"\n          strokeWidth=\"32\"\n        >\n          <rect x=\"31\" y=\"86\" width=\"450\" height=\"340\" rx=\"70\" />\n          <line x1=\"31\" y1=\"180\" x2=\"470\" y2=\"180\" />\n        </g>\n      </svg>\n    );\n  }\n\n  if (\n    mainViewVisibility === \"stagesOnly\" ||\n    (mainViewVisibility === \"graphOnly\" && stageViewPosition === \"left\")\n  ) {\n    return (\n      <svg\n        width=\"512px\"\n        height=\"512px\"\n        viewBox=\"0 0 512 512\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <g\n          fill=\"none\"\n          fillRule=\"evenodd\"\n          stroke=\"currentColor\"\n          strokeWidth=\"32\"\n        >\n          <rect x=\"31\" y=\"86\" width=\"450\" height=\"340\" rx=\"70\" />\n          <line x1=\"184\" y1=\"100\" x2=\"184\" y2=\"420\" />\n        </g>\n      </svg>\n    );\n  }\n}\n","import \"./filter.scss\";\n\nimport Tippy from \"@tippyjs/react\";\nimport { useState } from \"react\";\n\nimport { useFilter } from \"../../pipeline-console-view/pipeline-console/main/providers/filter-provider.tsx\";\nimport { Result } from \"../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\nimport { classNames } from \"../utils/classnames.ts\";\nimport { DefaultDropdownProps } from \"./dropdown.tsx\";\nimport StatusIcon from \"./status-icon.tsx\";\nimport Tooltip from \"./tooltip.tsx\";\n\nexport default function Filter({ disabled }: FilterProps) {\n  const [visible, setVisible] = useState(false);\n  const { visibleStatuses, toggleStatus, resetStatuses, allVisible } =\n    useFilter();\n\n  const statuses = [\n    {\n      key: \"running\",\n      text: \"Running\",\n      status: Result.running,\n    },\n    {\n      key: \"success\",\n      text: \"Successful\",\n      status: Result.success,\n    },\n    {\n      key: \"failure\",\n      text: \"Failed\",\n      status: Result.failure,\n    },\n    {\n      key: \"unstable\",\n      text: \"Unstable\",\n      status: Result.unstable,\n    },\n    {\n      key: \"aborted\",\n      text: \"Aborted\",\n      status: Result.aborted,\n    },\n    {\n      key: \"skipped\",\n      text: \"Skipped\",\n      status: Result.skipped,\n    },\n    {\n      key: \"not_built\",\n      text: \"Not built\",\n      status: Result.not_built,\n    },\n  ];\n\n  const show = () => setVisible(true);\n  const hide = () => setVisible(false);\n\n  return (\n    <Tooltip content={\"Filter\"}>\n      <Tippy\n        {...DefaultDropdownProps}\n        visible={visible}\n        onClickOutside={hide}\n        placement=\"bottom\"\n        appendTo={document.body}\n        offset={[0, -1]}\n        content={\n          <div className=\"jenkins-dropdown\">\n            <div className=\"jenkins-dropdown__heading\">\n              Filter\n              {!allVisible && (\n                <button\n                  className={\n                    \"jenkins-button jenkins-button--tertiary jenkins-!-accent-color pgv-reset-button\"\n                  }\n                  onClick={resetStatuses}\n                >\n                  Reset\n                </button>\n              )}\n            </div>\n            {statuses.map((item, index) => (\n              <button\n                key={index}\n                className={classNames(\n                  \"jenkins-dropdown__item\",\n                  \"pgv-filter-button\",\n                  {\n                    \"pgv-filter-button--unchecked\": !visibleStatuses.includes(\n                      item.status,\n                    ),\n                  },\n                )}\n                onClick={() => toggleStatus(item.status)}\n              >\n                <div className=\"jenkins-dropdown__item__icon\">\n                  <StatusIcon\n                    status={item.status}\n                    skeleton={!visibleStatuses.includes(item.status)}\n                    percentage={0}\n                  />\n                </div>\n                {item.text}\n              </button>\n            ))}\n          </div>\n        }\n      >\n        <button\n          className={classNames(\n            \"jenkins-button\",\n            {\n              \"jenkins-button--tertiary\": allVisible,\n            },\n            {\n              \"jenkins-!-accent-color\": !allVisible,\n            },\n          )}\n          type=\"button\"\n          disabled={disabled}\n          onClick={visible ? hide : show}\n        >\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n            <path\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={!allVisible ? 42 : 36}\n              d=\"M32 144h448M112 256h288M208 368h96\"\n            />\n          </svg>\n        </button>\n      </Tippy>\n    </Tooltip>\n  );\n}\n\ninterface FilterProps {\n  disabled?: boolean;\n}\n","import \"./data-tree-view.scss\";\n\nimport {\n  memo,\n  MouseEvent as ReactMouseEvent,\n  useCallback,\n  useEffect,\n  useState,\n} from \"react\";\n\nimport Filter from \"../../../common/components/filter.tsx\";\nimport StatusIcon from \"../../../common/components/status-icon.tsx\";\nimport { classNames } from \"../../../common/utils/classnames.ts\";\nimport { Total } from \"../../../common/utils/timings.tsx\";\nimport {\n  Result,\n  StageInfo,\n} from \"../../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\nimport { useFilter } from \"./providers/filter-provider.tsx\";\n\nexport default function DataTreeView({\n  stages,\n  selected,\n  onNodeSelect,\n}: DataTreeViewProps) {\n  const { search, setSearch, visibleStatuses } = useFilter();\n  const filteredStages = filterStageTree(search, visibleStatuses, stages);\n\n  const handleSelect = useCallback(\n    (event: ReactMouseEvent, nodeId: string) => {\n      onNodeSelect(event, nodeId);\n    },\n    [onNodeSelect],\n  );\n\n  return (\n    <div>\n      <div className={\"pgw-filter-bar\"}>\n        <div className=\"jenkins-search\">\n          <div className=\"jenkins-search__icon\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n              <path\n                d=\"M221.09 64a157.09 157.09 0 10157.09 157.09A157.1 157.1 0 00221.09 64z\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeMiterlimit=\"10\"\n                strokeWidth=\"32\"\n              />\n              <path\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeLinecap=\"round\"\n                strokeMiterlimit=\"10\"\n                strokeWidth=\"32\"\n                d=\"M338.29 338.29L448 448\"\n              />\n            </svg>\n          </div>\n          <input\n            className=\"jenkins-input jenkins-search__input\"\n            placeholder=\"Search\"\n            type=\"search\"\n            autoComplete=\"off\"\n            autoCorrect=\"off\"\n            autoCapitalize=\"off\"\n            spellCheck=\"false\"\n            value={search}\n            onChange={(e) => setSearch(e.target.value)}\n          />\n        </div>\n        <Filter />\n      </div>\n\n      {filteredStages.length === 0 && (\n        <div className={\"jenkins-notice\"}>\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n            <path\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={36}\n              d=\"M32 144h448M112 256h288M208 368h96\"\n            />\n          </svg>\n          <div>No stages</div>\n        </div>\n      )}\n\n      <div id=\"tasks\" style={{ marginLeft: \"0.7rem\" }}>\n        {filteredStages.map((stage) => (\n          <TreeNode\n            key={stage.id}\n            stage={stage}\n            selected={String(selected)}\n            onSelect={handleSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nconst TreeNode = memo(function TreeNode({\n  stage,\n  selected,\n  onSelect,\n}: TreeNodeProps) {\n  const { search, visibleStatuses, allVisible } = useFilter();\n  const hasChildren = stage.children && stage.children.length > 0;\n  const isSelected = String(stage.id) === selected;\n  const [isExpanded, setIsExpanded] = useState<boolean>(\n    hasSelectedDescendant(stage),\n  );\n\n  function hasSelectedDescendant(stage: StageInfo): boolean {\n    return stage.children?.some(\n      (child) => String(child.id) === selected || hasSelectedDescendant(child),\n    );\n  }\n\n  const handleToggleClick = (e: ReactMouseEvent) => {\n    e.stopPropagation();\n    setIsExpanded(!isExpanded);\n  };\n\n  useEffect(() => {\n    if (hasSelectedDescendant(stage)) {\n      setIsExpanded(true);\n    }\n  }, [selected]);\n\n  useEffect(() => {\n    if (search.length || !allVisible) {\n      if (filterStageTree(search, visibleStatuses, [stage]).length !== 0) {\n        setIsExpanded(true);\n      }\n    }\n  }, [search, visibleStatuses, allVisible]);\n\n  return (\n    <div className=\"task\">\n      <div className=\"pgv-tree-node-header\">\n        <a\n          href={`?selected-node=` + stage.id}\n          onClick={(e) => {\n            // Only prevent left clicks\n            if (e.button !== 0 || e.metaKey || e.ctrlKey) {\n              return;\n            }\n\n            e.preventDefault();\n\n            history.replaceState({}, \"\", `?selected-node=` + stage.id);\n            if (!isSelected) {\n              onSelect(e, String(stage.id));\n            }\n            setIsExpanded(!isExpanded);\n          }}\n          className={classNames(\"pgv-tree-item\", \"task-link\", {\n            \"task-link--active\": isSelected,\n            \"pgv-tree-item--skeleton\": stage.skeleton,\n          })}\n        >\n          <div>\n            <span className=\"task-icon-link\">\n              <StatusIcon\n                status={stage.state}\n                percentage={stage.completePercent}\n                skeleton={stage.skeleton}\n              />\n            </span>\n            <span className=\"task-link-text\">{stage.name}</span>\n            <span className=\"pgv-tree-item__description\">\n              <Total ms={stage.totalDurationMillis} />\n            </span>\n          </div>\n        </a>\n\n        {hasChildren && (\n          <button\n            className={classNames(\"pgv-toggle-icon\", {\n              \"pgv-toggle-icon--active\": isExpanded,\n            })}\n            onClick={handleToggleClick}\n            aria-label={isExpanded ? \"Collapse\" : \"Expand\"}\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n              <path\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"48\"\n                d=\"M184 112l144 144-144 144\"\n              />\n            </svg>\n          </button>\n        )}\n      </div>\n\n      {hasChildren && isExpanded && (\n        <div className=\"pgv-tree-children\">\n          {stage.children.map((child) => (\n            <TreeNode\n              key={child.id}\n              stage={child}\n              selected={selected}\n              onSelect={onSelect}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n});\n\nconst filterStageTree = (\n  search: string,\n  visibleStatuses: Result[],\n  stages: StageInfo[],\n): StageInfo[] => {\n  return stages\n    .map((stage) => {\n      const filteredChildren = stage.children\n        ? filterStageTree(search, visibleStatuses, stage.children)\n        : [];\n\n      const matchesSelf =\n        stage.name.toLowerCase().includes(search.toLowerCase()) &&\n        visibleStatuses.includes(stage.state);\n\n      // Include this stage if it matches or has matching children\n      if (matchesSelf || filteredChildren.length > 0) {\n        return {\n          ...stage,\n          children: filteredChildren,\n        };\n      }\n\n      return null;\n    })\n    .filter((stage) => stage !== null);\n};\n\ninterface DataTreeViewProps {\n  stages: StageInfo[];\n  selected?: number;\n  onNodeSelect: (event: ReactMouseEvent, nodeId: string) => void;\n}\n\ninterface TreeNodeProps {\n  stage: StageInfo;\n  selected: string;\n  onSelect: (event: ReactMouseEvent, id: string) => void;\n}\n","// re-export Result so the relative path exists in one location.\nexport * from \"../../../common/RestClient.tsx\";\nexport type {\n  StageInfo,\n  StageType,\n} from \"../../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\nexport { Result } from \"../../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\n\nexport const LOG_FETCH_SIZE = 150 * 1024;\nexport const POLL_INTERVAL = 1000;\n","import { useCallback, useEffect, useRef, useState } from \"react\";\n\nimport useRunPoller from \"../../../../common/tree-api.ts\";\nimport {\n  getConsoleTextOffset,\n  getRunSteps,\n  LOG_FETCH_SIZE,\n  POLL_INTERVAL,\n  Result,\n  StageInfo,\n  StepInfo,\n  StepLogBufferInfo,\n} from \"../PipelineConsoleModel.tsx\";\n\nexport function useStepsPoller(props: RunPollerProps) {\n  const { run, loading } = useRunPoller({\n    currentRunPath: props.currentRunPath,\n    previousRunPath: props.previousRunPath,\n  });\n\n  const [openStage, setOpenStage] = useState(\"\");\n  const [expandedSteps, setExpandedSteps] = useState<string[]>([]);\n  const [steps, setSteps] = useState<StepInfo[]>([]);\n  const [stepBuffers, setStepBuffers] = useState(\n    new Map<string, StepLogBufferInfo>(),\n  );\n  const [userManuallySetNode, setUserManuallySetNode] = useState(false);\n\n  const stepsRef = useRef<StepInfo[]>([]);\n\n  const updateStepConsoleOffset = useCallback(\n    async (stepId: string, forceUpdate: boolean, startByte: number) => {\n      const stepBuffer = stepBuffers.get(stepId) ?? {\n        lines: [],\n        startByte: 0 - LOG_FETCH_SIZE,\n        endByte: -1,\n        stepId,\n      };\n      if (stepBuffer.startByte > 0 && !forceUpdate) return;\n      const response = await getConsoleTextOffset(stepId, startByte);\n      if (!response) return;\n\n      const newLogLines = response.text.trim().split(\"\\n\") || [];\n\n      if (stepBuffer.endByte > 0 && stepBuffer.endByte <= startByte) {\n        stepBuffer.lines = [...stepBuffer.lines, ...newLogLines];\n      } else {\n        stepBuffer.lines = newLogLines;\n        stepBuffer.startByte = response.startByte;\n      }\n\n      stepBuffer.endByte = response.endByte;\n\n      setStepBuffers((prev) => new Map(prev).set(stepId, stepBuffer));\n    },\n    [],\n  );\n\n  const parseUrlParams = useCallback(\n    (steps: StepInfo[]): boolean => {\n      const params = new URLSearchParams(document.location.search.substring(1));\n      let selected = params.get(\"selected-node\");\n      if (!selected) {\n        return false;\n      }\n\n      setUserManuallySetNode(true);\n\n      const step = steps.find((s) => s.id === selected);\n      const expanded: string[] = [];\n\n      if (step) {\n        selected = step.stageId;\n        expanded.push(step.id);\n\n        updateStepConsoleOffset(\n          step.id,\n          false,\n          parseInt(params.get(\"start-byte\") || `${0 - LOG_FETCH_SIZE}`),\n        );\n      }\n\n      setOpenStage(selected);\n      setExpandedSteps(expanded);\n      return true;\n    },\n    [updateStepConsoleOffset],\n  );\n\n  const getDefaultSelectedStep = (steps: StepInfo[]) => {\n    if (userManuallySetNode) {\n      return;\n    }\n\n    let selectedStep = steps.find((step) => step !== undefined);\n    if (!steps || steps.length === 0 || !selectedStep) {\n      return null;\n    }\n    for (const step of steps) {\n      const stepResult = step.state.toLowerCase() as Result;\n      const selectedStepResult = selectedStep?.state.toLowerCase() as Result;\n      switch (stepResult) {\n        case Result.running:\n        case Result.queued:\n        case Result.paused:\n          // Return first running/queued/paused step.\n          return step;\n        case Result.unstable:\n        case Result.failure:\n        case Result.aborted:\n          if (selectedStepResult && stepResult < selectedStepResult) {\n            // Return first unstable/failed/aborted step which has a state worse than the selectedStep.\n            // E.g. if the first step state is failure we want to return that over a later unstable step.\n            return step;\n          }\n          continue;\n        default:\n          // Otherwise select the step with the worst result with the largest id - e.g. (last step if all successful).\n          if (selectedStepResult && stepResult <= selectedStepResult) {\n            selectedStep = step;\n          }\n      }\n    }\n    return selectedStep;\n  };\n\n  useEffect(() => {\n    getRunSteps()\n      .then((steps) => {\n        steps = steps || [];\n        setSteps(steps);\n\n        const usedUrl = parseUrlParams(steps);\n        if (!usedUrl) {\n          const defaultStep = getDefaultSelectedStep(steps);\n          if (defaultStep) {\n            setOpenStage(defaultStep.stageId);\n\n            if (defaultStep.stageId) {\n              setExpandedSteps((prev) => [...prev, defaultStep.id]);\n              updateStepConsoleOffset(\n                defaultStep.id,\n                false,\n                0 - LOG_FETCH_SIZE,\n              );\n            }\n          }\n        }\n\n        if (!run?.complete) {\n          startPollingPipeline({\n            getStateUpdateFn: getRunSteps,\n            onData: (data) => {\n              const hasNewSteps =\n                JSON.stringify(stepsRef.current) !== JSON.stringify(data);\n\n              if (userManuallySetNode) {\n                const defaultStep = getDefaultSelectedStep(steps);\n                if (defaultStep) {\n                  setOpenStage(defaultStep.stageId);\n\n                  if (defaultStep.stageId) {\n                    setExpandedSteps((prev) => [...prev, defaultStep.id]);\n                    updateStepConsoleOffset(\n                      defaultStep.id,\n                      false,\n                      0 - LOG_FETCH_SIZE,\n                    );\n                  }\n                }\n              }\n\n              if (hasNewSteps) {\n                setSteps(data);\n                stepsRef.current = data;\n              }\n            },\n            checkComplete: () => !run?.complete,\n            interval: POLL_INTERVAL,\n          });\n        }\n        return null;\n      })\n      .catch((error) => {\n        console.error(\"Error in getRunSteps:\", error);\n      });\n  }, [run?.stages]);\n\n  const handleStageSelect = useCallback(\n    (nodeId: string) => {\n      setUserManuallySetNode(true);\n\n      if (!nodeId) return;\n      if (nodeId === openStage) return; // skip if already selected\n\n      const stepsForStage = steps.filter((step) => step.stageId === nodeId);\n      const lastStep = stepsForStage[stepsForStage.length - 1];\n      const newlyExpandedSteps = lastStep ? [lastStep.id] : [];\n\n      setOpenStage(nodeId);\n      setExpandedSteps((prev) => [...prev, ...newlyExpandedSteps]);\n\n      if (lastStep) {\n        updateStepConsoleOffset(lastStep.id, false, 0 - LOG_FETCH_SIZE);\n      }\n    },\n    [openStage, steps, updateStepConsoleOffset],\n  );\n\n  const onStepToggle = (nodeId: string) => {\n    setUserManuallySetNode(true);\n    if (!expandedSteps.includes(nodeId)) {\n      setExpandedSteps((prev) => [...prev, nodeId]);\n      updateStepConsoleOffset(nodeId, false, 0 - LOG_FETCH_SIZE);\n    } else {\n      setExpandedSteps((prev) => prev.filter((id) => id !== nodeId));\n    }\n  };\n\n  const onMoreConsoleClick = (nodeId: string, startByte: number) => {\n    updateStepConsoleOffset(nodeId, true, startByte);\n  };\n\n  const getStageSteps = (stageId: string) => {\n    return steps.filter((step) => step.stageId === stageId);\n  };\n\n  const getStageStepBuffers = (stageId: string) => {\n    const buffers = new Map<string, StepLogBufferInfo>();\n    steps.forEach((step) => {\n      if (step.stageId === stageId && stepBuffers.has(step.id)) {\n        buffers.set(step.id, stepBuffers.get(step.id)!);\n      }\n    });\n    return buffers;\n  };\n\n  const getOpenStage = (): StageInfo | null => {\n    const findStage = (stages: StageInfo[]): StageInfo | null => {\n      for (const stage of stages) {\n        if (String(stage.id) === openStage) return stage;\n        if (stage.children.length > 0) {\n          const result = findStage(stage.children);\n          if (result) return result;\n        }\n      }\n      return null;\n    };\n    return openStage ? findStage(run?.stages || []) : null;\n  };\n\n  return {\n    openStage: getOpenStage(),\n    openStageSteps: getStageSteps(openStage),\n    openStageStepBuffers: getStageStepBuffers(openStage),\n    expandedSteps,\n    stages: run?.stages || [],\n    handleStageSelect,\n    onStepToggle,\n    onMoreConsoleClick,\n    loading,\n  };\n}\n\n/**\n * Starts polling a function until a complete condition is met.\n */\nconst startPollingPipeline = ({\n  getStateUpdateFn,\n  onData,\n  checkComplete,\n  interval = 1000,\n}: {\n  getStateUpdateFn: () => Promise<StepInfo[] | null>;\n  onData: (data: StepInfo[]) => void;\n  checkComplete: (data: StepInfo[]) => boolean;\n  interval?: number;\n}): (() => void) => {\n  let polling = true;\n\n  const poll = async () => {\n    while (polling) {\n      const data = (await getStateUpdateFn()) || [];\n      onData(data);\n\n      if (checkComplete(data)) {\n        polling = false;\n        break;\n      }\n\n      await new Promise((resolve) => setTimeout(resolve, interval));\n    }\n  };\n\n  setTimeout(poll, interval);\n\n  return () => {\n    polling = false;\n  };\n};\n\ninterface RunPollerProps {\n  currentRunPath: string;\n  previousRunPath?: string;\n}\n","import \"./scroll-to-top-bottom.scss\";\n\nimport { useEffect, useState } from \"react\";\n\nimport { classNames } from \"../../../common/utils/classnames.ts\";\n\nexport default function ScrollToTopBottom() {\n  const [isAtTop, setIsAtTop] = useState(true);\n  const [isAtBottom, setIsAtBottom] = useState(false);\n  const [isScrollable, setIsScrollable] = useState(false);\n\n  useEffect(() => {\n    const updateScrollState = () => {\n      const scrollTop =\n        window.pageYOffset || document.documentElement.scrollTop;\n      const windowHeight = window.innerHeight;\n      const docHeight = document.documentElement.scrollHeight;\n\n      const atTop = scrollTop <= 10;\n      const atBottom = scrollTop + windowHeight >= docHeight - 10;\n      const scrollable = docHeight > windowHeight + 10;\n\n      setIsAtTop(atTop);\n      setIsAtBottom(atBottom);\n      setIsScrollable(scrollable);\n\n      // Distance from bottom\n      const distanceFromBottom = docHeight - (scrollTop + windowHeight);\n\n      // Only trigger the offset if we're within 20px from the bottom\n      const offset = Math.max(0, Math.min(100, 100 - distanceFromBottom));\n\n      const root = document.documentElement;\n      root.style.setProperty(\"--pgv-offset-bottom\", `${offset}px`);\n    };\n\n    updateScrollState();\n\n    window.addEventListener(\"scroll\", updateScrollState);\n    window.addEventListener(\"resize\", updateScrollState);\n\n    const observer = new MutationObserver(updateScrollState);\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true,\n      attributes: true,\n      characterData: true,\n    });\n\n    return () => {\n      window.removeEventListener(\"scroll\", updateScrollState);\n      window.removeEventListener(\"resize\", updateScrollState);\n      observer.disconnect();\n    };\n  }, []);\n\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n    });\n  };\n\n  const scrollToBottom = () => {\n    window.scrollTo({\n      top: document.documentElement.scrollHeight,\n    });\n  };\n\n  return (\n    <div\n      className={classNames(`pgv-scroll-to-top-bottom`, {\n        \"pgv-scroll-to-top-bottom--visible\": isScrollable,\n      })}\n      aria-hidden={!isScrollable}\n    >\n      <button\n        onClick={scrollToTop}\n        className=\"jenkins-button\"\n        disabled={isAtTop}\n      >\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n          <path\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"48\"\n            d=\"M112 244l144-144 144 144M256 120v292\"\n          />\n        </svg>\n      </button>\n      <button\n        onClick={scrollToBottom}\n        className=\"jenkins-button\"\n        disabled={isAtBottom}\n      >\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n          <path\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"48\"\n            d=\"M112 268l144 144 144-144M256 392V100\"\n          />\n        </svg>\n      </button>\n    </div>\n  );\n}\n","import \"./split-view.scss\";\n\nimport {\n  Children,\n  MouseEvent as ReactMouseEvent,\n  ReactNode,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\n\nimport { useLayoutPreferences } from \"./providers/user-preference-provider.tsx\";\n\nexport default function SplitView(props: SplitViewNewProps) {\n  const {\n    setTreeViewWidth,\n    setStageViewWidth,\n    setStageViewHeight,\n    treeViewWidth,\n    stageViewWidth,\n    stageViewHeight,\n  } = useLayoutPreferences();\n\n  const { direction = \"horizontal\", storageKey } = props;\n  const [isDragging, setIsDragging] = useState(false);\n\n  const isVertical = direction === \"vertical\";\n\n  const initialSize = (() => {\n    if (storageKey === \"stages\") return treeViewWidth;\n    if (storageKey === \"graph\") {\n      return isVertical ? stageViewHeight : stageViewWidth;\n    }\n    return 300; // fallback\n  })();\n\n  useEffect(() => {\n    const newSize = (() => {\n      if (storageKey === \"stages\") return treeViewWidth;\n      if (storageKey === \"graph\") {\n        return direction === \"vertical\" ? stageViewHeight : stageViewWidth;\n      }\n      return 300;\n    })();\n\n    setPanelSize(newSize);\n  }, [direction, treeViewWidth, stageViewWidth, stageViewHeight, storageKey]);\n\n  const [panelSize, setPanelSize] = useState<number>(initialSize);\n\n  const dividerRef = useRef<HTMLDivElement>(null);\n\n  const startDragging = (e: ReactMouseEvent) => {\n    setIsDragging(true);\n    e.preventDefault();\n  };\n\n  const stopDragging = () => setIsDragging(false);\n\n  const handleDragging = (e: MouseEvent) => {\n    if (!isDragging) return;\n\n    // Dynamically follow mouse based on direction\n    const newSize =\n      direction === \"vertical\"\n        ? e.clientY - getContainerOffset()\n        : e.clientX - getContainerOffset();\n\n    const clampedSize = Math.max(\n      direction === \"vertical\" ? 100 : 200,\n      Math.min(newSize, 1500),\n    );\n    setPanelSize(clampedSize);\n\n    // Update context sizes\n    if (storageKey === \"stages\") {\n      setTreeViewWidth(clampedSize);\n    } else if (storageKey === \"graph\") {\n      if (direction === \"vertical\") {\n        setStageViewHeight(clampedSize);\n      } else {\n        setStageViewWidth(clampedSize);\n      }\n    }\n  };\n\n  const handleDoubleClick = () => {\n    const resetSize = (() => {\n      if (storageKey === \"stages\") return 300;\n      if (storageKey === \"graph\") return isVertical ? 250 : 600;\n      return 300;\n    })();\n\n    setPanelSize(resetSize);\n\n    if (storageKey === \"stages\") {\n      setTreeViewWidth(resetSize);\n    } else if (storageKey === \"graph\") {\n      if (direction === \"vertical\") {\n        setStageViewHeight(resetSize);\n      } else {\n        setStageViewWidth(resetSize);\n      }\n    }\n  };\n\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getContainerOffset = () => {\n    if (containerRef.current) {\n      const rect = containerRef.current.getBoundingClientRect();\n      return direction === \"vertical\" ? rect.top : rect.left;\n    }\n    return 0;\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"mousemove\", handleDragging);\n    window.addEventListener(\"mouseup\", stopDragging);\n    return () => {\n      window.removeEventListener(\"mousemove\", handleDragging);\n      window.removeEventListener(\"mouseup\", stopDragging);\n    };\n  });\n\n  // If we only have one child, just return it\n  const childrenArray = Children.toArray(props.children).filter(Boolean);\n  if (childrenArray.length === 1) {\n    return <>{childrenArray[0]}</>;\n  }\n\n  const gridTemplate =\n    direction === \"vertical\" ? `${panelSize}px 1fr` : `${panelSize}px 1fr`;\n\n  return (\n    <div\n      ref={containerRef}\n      className=\"pgv-split-view__container\"\n      style={{\n        display: \"grid\",\n        gridTemplateColumns:\n          direction === \"vertical\" ? undefined : gridTemplate,\n        gridTemplateRows: direction === \"vertical\" ? gridTemplate : undefined,\n      }}\n    >\n      <div className=\"pgv-split-view__side-panel\">\n        {childrenArray[0]}\n        <div\n          ref={dividerRef}\n          onMouseDown={startDragging}\n          onDoubleClick={handleDoubleClick}\n          className={`pgv-split-view__divider ${\n            direction === \"vertical\" ? \"pgv-split-view__divider--vertical\" : \"\"\n          }`}\n        />\n      </div>\n      <div>{childrenArray[1]}</div>\n    </div>\n  );\n}\n\ninterface SplitViewNewProps {\n  children: ReactNode[];\n  direction?: \"horizontal\" | \"vertical\";\n  storageKey: \"stages\" | \"graph\";\n}\n","export default function StageNodeLink({ agent }: StageNodeLinkProps) {\n  if (!agent) {\n    return null;\n  }\n\n  const agentName = agent === \"built-in\" ? \"Jenkins\" : agent;\n  const href = getAgentUrl(agent);\n\n  function getAgentUrl(name: string) {\n    // Wrap built-in in brackets\n    const id = name === \"built-in\" ? \"(built-in)\" : name;\n    const rootPath = document.head.dataset.rooturl;\n    return `${rootPath}/computer/${id}/`;\n  }\n\n  return (\n    <li>\n      <a\n        href={href}\n        className={\"jenkins-button jenkins-button--tertiary\"}\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        <svg\n          width=\"512px\"\n          height=\"512px\"\n          viewBox=\"0 0 512 512\"\n          version=\"1.1\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <g\n            stroke=\"none\"\n            strokeWidth=\"1\"\n            fill=\"none\"\n            fillRule=\"evenodd\"\n            strokeLinejoin=\"round\"\n          >\n            <g\n              transform=\"translate(32.000000, 64.000000)\"\n              stroke=\"currentColor\"\n              strokeWidth=\"32\"\n            >\n              <rect x=\"0\" y=\"0\" width=\"448\" height=\"320\" rx=\"32\" />\n              <polygon\n                strokeLinecap=\"round\"\n                fillRule=\"nonzero\"\n                points=\"272 384 264 320 184 320 176 384\"\n              />\n              <line x1=\"336\" y1=\"384\" x2=\"112\" y2=\"384\" strokeLinecap=\"round\" />\n            </g>\n          </g>\n        </svg>\n        {agentName}\n      </a>\n    </li>\n  );\n}\n\ninterface StageNodeLinkProps {\n  agent?: string;\n}\n","export const DOCUMENT = (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n    <path\n      d=\"M416 221.25V416a48 48 0 01-48 48H144a48 48 0 01-48-48V96a48 48 0 0148-48h98.75a32 32 0 0122.62 9.37l141.26 141.26a32 32 0 019.37 22.62z\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"32\"\n    />\n    <path\n      d=\"M256 56v120a32 32 0 0032 32h120M176 288h160M176 368h160\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"32\"\n    />\n  </svg>\n);\n\nexport const CONSOLE = (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n    <rect\n      x=\"32\"\n      y=\"48\"\n      width=\"448\"\n      height=\"416\"\n      rx=\"48\"\n      ry=\"48\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"32\"\n    />\n    <path\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"32\"\n      d=\"M96 112l80 64-80 64M192 240h64\"\n    />\n  </svg>\n);\n","import \"./stage-details.scss\";\n\nimport Dropdown from \"../../../common/components/dropdown.tsx\";\nimport StatusIcon, {\n  resultToColor,\n} from \"../../../common/components/status-icon.tsx\";\nimport Tooltip from \"../../../common/components/tooltip.tsx\";\nimport {\n  exact,\n  Paused,\n  Started,\n  Total,\n} from \"../../../common/utils/timings.tsx\";\nimport { StageInfo } from \"../../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\nimport StageNodeLink from \"./StageNodeLink.tsx\";\nimport { DOCUMENT } from \"./symbols.tsx\";\n\nexport default function StageDetails({ stage }: StageDetailsProps) {\n  if (!stage) {\n    return null;\n  }\n\n  return (\n    <div\n      className={\n        \"pgv-stage-details \" + resultToColor(stage.state, stage.skeleton)\n      }\n    >\n      {stage.state === \"running\" && (\n        <div className={\"pgv-stage-details__running\"} />\n      )}\n      <div>\n        <StatusIcon\n          status={stage.state}\n          skeleton={stage.skeleton}\n          percentage={stage.completePercent}\n        />\n        <h2>{stage.name}</h2>\n      </div>\n      <ul>\n        <li>\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n            <path\n              d=\"M112.91 128A191.85 191.85 0 0064 254c-1.18 106.35 85.65 193.8 192 194 106.2.2 192-85.83 192-192 0-104.54-83.55-189.61-187.5-192a4.36 4.36 0 00-4.5 4.37V152\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n            />\n            <path\n              d=\"M233.38 278.63l-79-113a8.13 8.13 0 0111.32-11.32l113 79a32.5 32.5 0 01-37.25 53.26 33.21 33.21 0 01-8.07-7.94z\"\n              fill=\"currentColor\"\n            />\n          </svg>\n          <Total ms={stage.totalDurationMillis} />\n        </li>\n        <li>\n          <Tooltip content={exact(stage.startTimeMillis)}>\n            <span>\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                <path\n                  d=\"M256 64C150 64 64 150 64 256s86 192 192 192 192-86 192-192S362 64 256 64z\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  strokeMiterlimit=\"10\"\n                  strokeWidth=\"32\"\n                />\n                <path\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth=\"32\"\n                  d=\"M256 128v144h96\"\n                />\n              </svg>\n              <Started since={stage.startTimeMillis} />\n            </span>\n          </Tooltip>\n        </li>\n        {stage.pauseDurationMillis !== 0 && (\n          <li>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n              <path\n                d=\"M145.61 464h220.78c19.8 0 35.55-16.29 33.42-35.06C386.06 308 304 310 304 256s83.11-51 95.8-172.94c2-18.78-13.61-35.06-33.41-35.06H145.61c-19.8 0-35.37 16.28-33.41 35.06C124.89 205 208 201 208 256s-82.06 52-95.8 172.94c-2.14 18.77 13.61 35.06 33.41 35.06z\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"32\"\n              />\n              <path\n                d=\"M343.3 432H169.13c-15.6 0-20-18-9.06-29.16C186.55 376 240 356.78 240 326V224c0-19.85-38-35-61.51-67.2-3.88-5.31-3.49-12.8 6.37-12.8h142.73c8.41 0 10.23 7.43 6.4 12.75C310.82 189 272 204.05 272 224v102c0 30.53 55.71 47 80.4 76.87 9.95 12.04 6.47 29.13-9.1 29.13z\"\n                fill=\"currentColor\"\n              />\n            </svg>\n            <Paused since={stage.pauseDurationMillis} />\n          </li>\n        )}\n        <StageNodeLink agent={stage.agent} />\n        <li>\n          <Dropdown\n            className={\"jenkins-button--tertiary\"}\n            disabled={stage.synthetic}\n            items={[\n              {\n                text: \"View stage as plain text\",\n                icon: DOCUMENT,\n                href: `log?nodeId=${stage.id}`,\n                target: \"_blank\",\n              },\n              {\n                text: \"Download stage logs\",\n                icon: (\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                    <path\n                      d=\"M336 176h40a40 40 0 0140 40v208a40 40 0 01-40 40H136a40 40 0 01-40-40V216a40 40 0 0140-40h40\"\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth=\"32\"\n                    />\n                    <path\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth=\"32\"\n                      d=\"M176 272l80 80 80-80M256 48v288\"\n                    />\n                  </svg>\n                ),\n                href: `log?nodeId=${stage.id}`,\n                download: `${stage.name}.txt`,\n              },\n            ]}\n          />\n        </li>\n      </ul>\n    </div>\n  );\n}\n\ninterface StageDetailsProps {\n  stage: StageInfo | null;\n}\n","import \"./console-log-card.scss\";\n\nimport {\n  lazy,\n  MouseEvent as ReactMouseEvent,\n  Suspense,\n  useEffect,\n} from \"react\";\n\nimport StatusIcon from \"../../../common/components/status-icon.tsx\";\nimport Tooltip from \"../../../common/components/tooltip.tsx\";\nimport { classNames } from \"../../../common/utils/classnames.ts\";\nimport { Total } from \"../../../common/utils/timings.tsx\";\nimport {\n  LOG_FETCH_SIZE,\n  StepInfo,\n  StepLogBufferInfo,\n} from \"./PipelineConsoleModel.tsx\";\n\nconst ConsoleLogStream = lazy(() => import(\"./ConsoleLogStream.tsx\"));\n\nexport default function ConsoleLogCard(props: ConsoleLogCardProps) {\n  useEffect(() => {\n    if (props.isExpanded) {\n      props.onMoreConsoleClick(props.step.id, props.stepBuffer.startByte);\n    }\n  }, [props.isExpanded]);\n\n  const handleToggle = (e: ReactMouseEvent<HTMLElement>) => {\n    // Only prevent left clicks\n    if (e.button !== 0 || e.metaKey || e.ctrlKey) {\n      return;\n    }\n\n    e.preventDefault();\n\n    history.replaceState({}, \"\", `?selected-node=` + props.step.id);\n\n    props.onStepToggle(props.step.id);\n  };\n\n  const showMoreLogs = () => {\n    let startByte = props.stepBuffer.startByte - LOG_FETCH_SIZE;\n    if (startByte < 0) startByte = 0;\n    props.onMoreConsoleClick(props.step.id, startByte);\n  };\n\n  const getTruncatedLogWarning = () => {\n    if (props.stepBuffer.lines && props.stepBuffer.startByte > 0) {\n      return (\n        <button\n          onClick={showMoreLogs}\n          className={\n            \"pgv-show-more-logs jenkins-button jenkins-!-warning-color\"\n          }\n        >\n          There’s more to see - {prettySizeString(props.stepBuffer.startByte)}{\" \"}\n          of logs hidden\n        </button>\n      );\n    }\n    return undefined;\n  };\n\n  const prettySizeString = (size: number) => {\n    const kib = 1024;\n    const mib = 1024 * 1024;\n    const gib = 1024 * 1024 * 1024;\n    if (size < kib) return `${size}B`;\n    if (size < mib) return `${(size / kib).toFixed(2)}KiB`;\n    if (size < gib) return `${(size / mib).toFixed(2)}MiB`;\n    return `${(size / gib).toFixed(2)}GiB`;\n  };\n\n  return (\n    <div className={\"pgv-step-detail-group\"} key={`step-card-${props.step.id}`}>\n      <div\n        className={classNames(\"pgv-step-detail-header\", \"jenkins-button\", {\n          \"jenkins-button--tertiary\": !props.isExpanded,\n        })}\n      >\n        <a\n          href={`?selected-node=` + props.step.id}\n          onClick={handleToggle}\n          key={`step-action-area-${props.step.id}`}\n        >\n          <div className=\"pgv-step-detail-header__content\">\n            <StatusIcon\n              status={props.step.state}\n              percentage={props.step.completePercent}\n            />\n\n            {props.step.title !== \"\" && <span>{props.step.title}</span>}\n\n            {props.step.name !== \"\" && <span>{props.step.name}</span>}\n\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 512 512\"\n              className={\"pgv-step-detail-header__chevron\"}\n              style={{ rotate: props.isExpanded ? \"90deg\" : \"0deg\" }}\n            >\n              <path\n                fill=\"none\"\n                stroke=\"var(--text-color-secondary)\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"48\"\n                opacity={0.75}\n                d=\"M184 112l144 144-144 144\"\n              />\n            </svg>\n          </div>\n\n          <div className=\"pgv-step-detail-header__actions\">\n            <span\n              style={{\n                color: \"var(--text-color-secondary)\",\n                fontWeight: \"normal\",\n              }}\n            >\n              <Total ms={props.step.totalDurationMillis} />\n            </span>\n          </div>\n        </a>\n\n        <Tooltip content={\"View step as plain text\"}>\n          <a\n            href={`log?nodeId=${props.step.id}`}\n            className={\"jenkins-button jenkins-button--tertiary\"}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n              <path\n                d=\"M384 224v184a40 40 0 01-40 40H104a40 40 0 01-40-40V168a40 40 0 0140-40h167.48M336 64h112v112M224 288L440 72\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"32\"\n              />\n            </svg>\n          </a>\n        </Tooltip>\n      </div>\n\n      {props.isExpanded && (\n        <div style={{ paddingTop: \"0.5rem\" }}>\n          {getTruncatedLogWarning()}\n          <Suspense>\n            <ConsoleLogStream\n              logBuffer={props.stepBuffer}\n              onMoreConsoleClick={props.onMoreConsoleClick}\n              step={props.step}\n              maxHeightScale={0.65}\n            />\n          </Suspense>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport type ConsoleLogCardProps = {\n  step: StepInfo;\n  stepBuffer: StepLogBufferInfo;\n  isExpanded: boolean;\n  onStepToggle: (nodeId: string) => void;\n  onMoreConsoleClick: (nodeId: string, startByte: number) => void;\n};\n"],"file":"assets/PipelineConsole-C-AJqTw6.js"}